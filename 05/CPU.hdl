// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
        ALU(x=registerDout, y=aOrM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8],
        f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=zrOut, ng=ngOut);

        Mux16(a=instruction, b=aluOut, sel=instruction[15], out=toRegisterA);

        Not(in=instruction[15], out=isAinstruction);
        Or(a=isAinstruction, b=instruction[5], out=loada);
        ARegister(in=toRegisterA, load=loada, out=registerAout, out[0..14]=addressM);

        And(a=instruction[15], b=instruction[12], out=compIsM);
        Mux16(a=registerAout, b=inM, sel=compIsM, out=aOrM);

        And(a=instruction[15], b=instruction[4], out=loadd);
        DRegister(in=aluOut, load=loadd, out=registerDout);

        And(a=instruction[15], b=instruction[3], out=writeM);

        Not(in=zrOut, out=notzr);
        Not(in=ngOut, out=notng);
        And(a=notng, b=notzr, out=positive);

        And(a=instruction[0], b=positive, out=jgt);

        And(a=instruction[1], b=zrOut, out=jeq);

        And(a=instruction[1], b=zrOut, out=j2);
        And(a=instruction[0], b=positive, out=j3);
        And(a=j2, b=j3, out=jge);

        And(a=instruction[2], b=ngOut, out=jlt);

        And(a=instruction[2], b=ngOut, out=j1);
        And(a=j3, b=j1, out=jne);

        And(a=j1, b=j2, out=jle);

        And(a=j1, b=j2, out=j1j2);
        And(a=j1j2, b=j3, out=jmp);

        Or8Way(in[0]=jgt, in[1]=jeq, in[2]=jlt, in[3]=jge, in[4]=jne, in[5]=jle, in[6]=jmp, out=maybeJump);
        And(a=instruction[15], b=maybeJump, out=jump);

        PC(in=registerAout, load=jump, inc=true, reset=reset, out[0..14]=pc);
    }

        //And(a=instruction[15], b=instruction[1], out=jeq);
        //And(a=jeq, b=zrOut, out=j2);

        //Or(a=j1, b=j2, out=jumpPC);
        //Or(a=jumpPC, b=j3, out=loadpc);

        //And(a=ngOut, b=instruction[2], out=jlt);
        //And(a=jlt, b=notng, out=j3);
    